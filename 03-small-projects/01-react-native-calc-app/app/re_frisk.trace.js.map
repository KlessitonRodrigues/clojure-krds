{"version":3,"sources":["re_frisk/trace.cljs"],"mappings":"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","names":["re-frisk.trace/component-name","c","G__15052","re-frisk.trace/operation-name","cljs.core/memoize","cljs.core/last","clojure.string.split","re-frisk.trace/static-fns","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__15056","re-frame.trace/*current-trace*","*current-trace*-temp-val__15057","re-frame.trace/start-trace","end__12472__auto__","re-frame.interop/now","duration__12473__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","reagent.impl.util/*non-reactive*","reagent.impl.component/do-render","rat","re_frisk.trace.goog$module$goog$object.get","_","reagent.impl.batching/mark-rendered","res","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","cljs-ratom","new-trace__12474__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.interop/reagent-id","cljs.core.map","re-frisk.trace/normalize-traces","traces","cljs.core.reduce","p__15062","map__15063","cljs.core/--destructure-map","cljs.core.get","items","op-type","tags","duration","id","start","trace","cljs.core._EQ_","cljs.core/namespace","item","G__15064","cljs.core/Keyword","cljs.core.conj","cljs.core/select-keys","re-frisk.utils/truncate-name","cljs.core/first","re-frisk.diff.diff/diff","prev","cljs.core/peek","cljs.core/pop","re-frisk.utils/str-ms","re-frame.db/app-db","cljs.core.sort_by","re-frisk.trace/normalize-durations","first-event","p__15073","map__15074","subs?","subs","handler-duration","fx-duration","map__15079","created-duration-cached","run-duration","created-duration","disposed-duration","render-duration","p__15080","map__15082","acc","end","cached?","G__15084","cljs.core/+","cljs.core/inc","cljs.core/not","and__5043__auto__","handler-fx-duration","G__15095"],"sourcesContent":["(ns re-frisk.trace\n  (:require [re-frisk.diff.diff :as diff]\n            [re-frisk.utils :as utils]\n            [re-frame.trace]\n            [reagent.ratom :as ratom]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.util :as util]\n            [re-frame.interop :as interop]\n            [clojure.string :as string]\n            [goog.object :as gob]\n            [re-frame.db :as db]))\n\n(defn component-name [c]\n  (some-> c .-constructor .-displayName))\n\n(def operation-name (memoize (fn [c] (last (string/split (component-name c) #\" > \")))))\n\n;; from https://github.com/day8/re-frame-10x/blob/master/src/day8/re_frame_10x.cljs#L24\n(def static-fns\n  {:render\n   (fn mp-render []\n     (this-as c\n       (re-frame.trace/with-trace\n        {:op-type   :render\n         :operation (operation-name c)}\n        (if util/*non-reactive*\n          (reagent.impl.component/do-render c)\n          (let [rat        (gob/get c \"cljsRatom\")\n                _          (batch/mark-rendered c)\n                res        (if (nil? rat)\n                             (ratom/run-in-reaction #(reagent.impl.component/do-render c) c \"cljsRatom\"\n                                                    batch/queue-render reagent.impl.component/rat-opts)\n                             (._run rat false))\n                cljs-ratom (gob/get c \"cljsRatom\")]         ;; actually a reaction\n            (re-frame.trace/merge-trace!\n             {:tags {:reaction      (interop/reagent-id cljs-ratom)\n                     :input-signals (when cljs-ratom\n                                      (map interop/reagent-id (gob/get cljs-ratom \"watching\" :none)))}})\n            res)))))})\n\n(defn normalize-traces [traces]\n  (reduce (fn [items {:keys [op-type tags duration id start] :as trace}]\n            (let [op-type (if (= (namespace op-type) \"sub\") :sub op-type)\n                  item    {:indx id :trace? true}]\n              (case op-type\n                ;:re-frame.router/fsm-trigger\n                #_(conj items (merge item\n                                     (select-keys trace [:id :op-type :operation :start :end])))\n                :event\n                (conj items (merge (dissoc item :trace?)\n                                   (assoc (select-keys trace [:id :op-type :operation :duration\n                                                              :start :end])\n                                     :event (:event tags)\n                                     :truncated-name (utils/truncate-name (str (first (:event tags))))\n                                     :app-db-diff (diff/diff (:app-db-before tags) (:app-db-after tags)))))\n                :event/handler\n                (let [prev (peek items)]\n                  (if (= (:op-type prev :event))\n                    (conj (pop items) (assoc prev :handler-duration duration))\n                    (conj items (merge item\n                                       (select-keys trace [:id :op-type :operation :duration])))))\n                :event/do-fx\n                (let [prev (peek items)]\n                  (if (= (:op-type prev :event))\n                    (conj (pop items) (assoc prev :fx-duration duration))\n                    (conj items (merge item\n                                       (select-keys trace [:id :op-type :duration])))))\n                (:sub :render)\n                (let [prev  (peek items)\n                      trace (select-keys trace [:id :op-type :operation :duration :start :end])\n                      trace (assoc trace :duration-ms (utils/str-ms (:duration trace))\n                                         :reaction (:reaction tags)\n                                         :cached? (:cached? tags)\n                                         :input-signals (:input-signals tags))]\n                  (if (:subs? prev)\n                    (conj (pop items) (update prev :subs conj trace))\n                    (conj items (merge item\n                                       {:op-type         :subs :subs? true :subs [trace]\n                                        :app-db-reaction (interop/reagent-id db/app-db)\n                                        :start           (:start trace)}))))\n                items)))                                    ;(conj items (merge item trace)))))\n          []\n          (sort-by :id traces)))\n\n(defn normalize-durations [first-event]\n  (fn [{:keys [subs? subs op-type handler-duration fx-duration start]\n        :as   trace}]\n    (let [{:keys [duration handler-duration fx-duration start created-duration-cached\n                  run-duration created-duration disposed-duration render-duration]\n           :as   trace}\n          (cond\n            subs?\n            (merge trace\n                   (reduce (fn [acc {:keys [duration op-type end cached?]}]\n                             (cond-> (update acc :duration + duration)\n                                     :always\n                                     (assoc :end end)\n                                     (= op-type :sub/run)\n                                     (-> (update :run-count inc)\n                                         (update :run-duration + duration))\n                                     (and (= op-type :sub/create) (not cached?))\n                                     (-> (update :created-count inc)\n                                         (update :created-duration + duration))\n                                     (and (= op-type :sub/create) cached?)\n                                     (-> (update :created-count-cached inc)\n                                         (update :created-duration-cached + duration))\n                                     (= op-type :sub/dispose)\n                                     (-> (update :disposed-count inc)\n                                         (update :disposed-duration + duration))\n                                     (= op-type :render)\n                                     (-> (update :render-count inc)\n                                         (update :render-duration + duration))))\n                           {:duration                0\n                            :run-count               0\n                            :run-duration            0\n                            :render-count            0\n                            :render-duration         0\n                            :created-count           0\n                            :created-duration        0\n                            :disposed-count          0\n                            :disposed-duration       0\n                            :created-count-cached    0\n                            :created-duration-cached 0}\n                           subs))\n            (= op-type :event)\n            (let [handler-fx-duration (+ handler-duration fx-duration)]\n              (assoc trace :handler-fx-duration handler-fx-duration\n                           :handler-fx-duration-ms (utils/str-ms handler-fx-duration)))\n            :else\n            trace)]\n      (cond-> trace\n              duration\n              (assoc :duration-ms (utils/str-ms duration))\n              handler-duration\n              (assoc :handler-duration-ms (utils/str-ms handler-duration))\n              fx-duration\n              (assoc :fx-duration-ms (utils/str-ms fx-duration))\n              run-duration\n              (assoc :run-duration-ms (utils/str-ms run-duration))\n              created-duration\n              (assoc :created-duration-ms (utils/str-ms created-duration))\n              created-duration-cached\n              (assoc :created-duration-cached-ms (utils/str-ms created-duration-cached))\n              disposed-duration\n              (assoc :disposed-duration-ms (utils/str-ms disposed-duration))\n              render-duration\n              (assoc :render-duration-ms (utils/str-ms render-duration))\n              :always\n              (assoc :position (- start (:start first-event)))))))"]}